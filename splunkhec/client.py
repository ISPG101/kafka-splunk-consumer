"""
Author: Scott Haskell
Company: Splunk Inc.
"""

__license__ = """
The MIT License

Copyright (c) 2016 Scott Haskell, Splunk Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
import logging
try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO
import gzip

class hec:
    """ Class for sending events to Splunk HTTP Event Collector Raw endpooint """

    def __init__(self,
                 splunk_server="",
                 splunk_hec_port="8088",
                 splunk_hec_channel="",
                 splunk_hec_token="",
                 splunk_sourcetype="",
                 splunk_source="",
                 use_https=True,
                 verify_ssl=True):
        """ 
        Keyword Arguments:
        splunk_server (string) -- Hostname or IP address of HEC server or load balancer
        splunk_hec_port (string) -- Port of Splunk HEC server (default 8088)
        splunk_hec_channel (string) -- UUID used by Splunk HEC on per application basis
        splunk_hec_token (string) -- UUID of token generated by Splunk for HEC input
        splunk_sourcetype (string) -- Splunk sourcetype for data source
        splunk_source (string) -- Splunk source
        use_https (boolean) -- Use HTTPS or HTTP protocol to send to HEC
        verify_ssl (boolean) -- Verify SSL certificate of Splunk HEC endpoint (default True)
        """
        self.splunk_server = splunk_server
        self.splunk_hec_port = splunk_hec_port
        self.splunk_hec_channel = splunk_hec_channel
        self.splunk_hec_token = splunk_hec_token
        self.splunk_sourcetype = splunk_sourcetype
        self.splunk_source = splunk_source
        self.use_https = use_https
        self.verify_ssl = verify_ssl
        self.token_string = "Splunk %s" % self.splunk_hec_token
        self.protocol = "https" if use_https else "http"
        self.post_string = '%s://%s:%s/services/collector/raw?\
channel=%s&sourcetype=%s&source=%s' % (self.protocol,
                                       self.splunk_server,
                                       self.splunk_hec_port,
                                       self.splunk_hec_channel,
                                       self.splunk_sourcetype,
                                       self.splunk_source)


    def writeToHec(self, messages):
        """ Write messages via HTTP POST to HEC Raw endpoint

        Arguments:
        messages (list) -- List of messages to be sent to HEC

        Returns:
        HTTP status code
        """
        headers = {'Authorization' : self.token_string}
        if self.use_compression:
            headers['content-encoding'] = 'gzip'
            mem_str = StringIO()
            with gzip.GzipFile(fileobj=mem_str, mode="w", compresslevel=self.compresslevel) as f:
                f.write('\n'.join(messages))
            data = mem_str.getvalue()
        else:
            data = '\n'.join(messages)

        res = requests.post(self.post_string,
                            data = data,
                            verify = self.verify_ssl,
                            headers = headers)

        return res.status_code

