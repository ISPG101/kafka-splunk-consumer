#!/usr/bin/env python
"""
Author: Scott Haskell
Company: Splunk Inc.

A Kafka consumer that implements a pykafka balanced consumer and Python
multiprocessing to send messages to Splunk HTTP Event collector tier
with scalability, parallelism and high availability in mind.
"""

__license__ = """
The MIT License

Copyright (c) 2016 Scott Haskell, Splunk Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

from kafka.client import kafkaConsumer
from common.utils import parseArgs, parseConfig
import logging
import multiprocessing
import argparse
import sys
import yaml

# List to hold jobs for multiprocessing
jobs = []

def worker(num, config):
    """ Create kafkaConsumer instance and consume topic
    Arguments:
    config -- parsed YAML config
    """
    try:
        consumer = kafkaConsumer(config.get('kafka').get('brokers'),
                                 config.get('kafka').get('zookeeper_server'),
                                 config.get('kafka').get('topic'),
                                 config.get('kafka').get('initial_offset'),
                                 config.get('kafka').get('consumer_group'),
                                 config.get('kafka').get('use_rdkafka'),
                                 config.get('kafka').get('ssl').get('use_ssl'),
                                 config.get('kafka').get('ssl').get('cafile'),
                                 config.get('kafka').get('ssl').get('certfile'),
                                 config.get('kafka').get('ssl').get('keyfile'),
                                 config.get('kafka').get('ssl').get('password'),
                                 config.get('hec').get('host'),
                                 config.get('hec').get('port'),
                                 config.get('hec').get('channel'),
                                 config.get('hec').get('token'),
                                 config.get('hec').get('sourcetype'),
                                 config.get('hec').get('source'),
                                 config.get('hec').get('use_https'),
                                 config.get('hec').get('verify_ssl'),
                                 config.get('hec').get('use_compression'),
                                 config.get('hec').get('compresslevel'),
                                 config.get('general').get('batch_size'),
                                 config.get('network').get('retry_attempts'),
                                 config.get('network').get('sleeptime'),
                                 config.get('network').get('max_sleeptime'),
                                 config.get('network').get('sleepscale'),
                                 config.get('network').get('jitter'),
                                 config.get('logging').get('loglevel'))
        consumer.consume()
    except(KeyboardInterrupt, SystemExit):
            raise Exception("Exiting via ctrl-c input from user")

def main():
    """ Parse args, parse YAML config, initialize workers and go. """
    # Parse args
    flags = parseArgs()
    # Parse YAML
    config = parseConfig(flags.config)

    # Get number of workers from config
    num_workers = config.get('general').get('workers')

    # Check for 'auto' and set number of workers with multiprocessing.cpu_count
    if(isinstance(num_workers, str)):
        if(num_workers == 'auto'):
            num_workers = multiprocessing.cpu_count()
        else:
            raise Exception("Please set workers to 'auto' or <number_of_cpu_cores>")
        
    for i in range(num_workers):
        worker_name = "worker-%s" % i
        p = multiprocessing.Process(name=worker_name, target=worker, args=(i,config))
        jobs.append(p)
        p.start()

    for j in jobs:
        j.join()

if __name__ == '__main__':
    main()
